---
layout: post
title: "WASM 기반의 Microservice Framework Spin"
date: "2022-12-28 13:03:44 +0900"
tags: [etc]
---

# Spin

---

![Untitled](https://i.imgur.com/F8xQBvm.png)

[Spin](https://developer.fermyon.com/spin/index)은 WebAssembly를 이용하여 Microservice를 구현할 수 있는 오픈소스 프레임워크입니다. Rust나 Go 로 구현할 수 있는 간단한 이벤트 중심의 프레임워크 입니다.

현재 Rust, Go, JavaScript 등 언어를 지원하고 있지만 spin은 WASM 기반으로 동작하기 때문에 WASM을 빌드할 수 있는 대부분에 언어로 사용할 수 있습니다.

## Install

---

Spin은 아래 커맨드를 실행하여 설치할 수 있습니다.

```rust
curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
```

```rust
sudo mv ./spin /usr/local/bin/spin
```

혹은 깃허브에서 직접 바이너리를 받아서 설치할 수 있습니다.

- 아래 예제는 Arm 맥북을 기준으로 설명한 예시 입니다. OS 및 Architecture에 따라 설치 파일이 다르기 때문에 다른 환경을 사용하시는 분들은 https://github.com/fermyon/spin/releases 에 가셔서 본인 환경에 맞는 파일을 설치하시면 됩니다.

```
% mkdir spin && cd spin
% curl -L https://github.com/fermyon/spin/releases/download/v0.2.0/spin-v0.2.0-macos-aarch64.tar.gz > spin-v0.2.0-macos-aarch64.tar.gz
% tar xfv spin-v0.2.0-macos-aarch64.tar.gz

```

## Try

---

Spin을 사용하여 프로젝트를 만들고자 할 때 템플릿을 이용하여 만들 수 있습니다.

```bash
$ spin templates list
You have no templates installed. Run
spin templates install --git https://github.com/fermyon/spin
to install a starter set.
```

처음 실행한다면 아무런 템플릿을 가지고 있지 않아서 위와 같이 나타납니다. 아래 커맨드를 이용하여 기본적으로 제공하는 템플릿을 설치할 수 있습니다.

```bash
spin templates install --git https://github.com/fermyon/spin
Copying remote template source
Installing template redis-rust...
Installing template http-rust...
Installing template http-go...
+--------------------------------------------------+
| Name         Description                         |
+==================================================+
| http-go      HTTP request handler using (Tiny)Go |
| http-rust    HTTP request handler using Rust     |
| redis-rust   Redis message handler using Rust    |
| ...                                              |
+--------------------------------------------------+
```

`spin new` 명령어를 이용하여 템플릿을 사용해 새로운 프로젝트를 만들 수 있습니다.

```bash
$ spin new
Pick a template to start your project with:
  http-c (HTTP request handler using C and the Zig toolchain)
  http-csharp (HTTP request handler using C# (EXPERIMENTAL))
  http-go (HTTP request handler using (Tiny)Go)
  http-grain (HTTP request handler using Grain)
> http-rust (HTTP request handler using Rust)
  http-swift (HTTP request handler using SwiftWasm)
  http-zig (HTTP request handler using Zig)
  redis-go (Redis message handler using (Tiny)Go)
  redis-rust (Redis message handler using Rust)

Enter a name for your new project: hello_rust
Project description: My first Rust Spin application
HTTP base: /
HTTP path: /...
$ tree
├── .cargo
│   └── config.toml
├── .gitignore
├── Cargo.toml
├── spin.toml
└── src
    └── lib.rs
```

Spin 프로젝트는 `spin.toml` 과 다른 구성요소로 이루어 집니다. `spin.toml` 은 spin 애플리케이션의 매니페스트 파일입니다.

Line 5: 이 애플리케이션이 http 요청을 트리거 하는 앱임을 나타냅니다.

Line 10: challenge.wasm 모듈을 실행한다는 내용을 정의하고 있습니다.

![Untitled](https://i.imgur.com/FHm3aKZ.png)

`src/lib.rs` 는 다음과 같습니다.

![Untitled](https://i.imgur.com/vJZ5ocu.png)

기본으로 작성되어 있는 함수는 단순히 요청을 받고 응답을 주는 간단한 코드로 되어 있습니다.

프로젝트를 빌드하기 위해서 `spin build` 명령어를 사용합니다.

![Untitled](https://i.imgur.com/aJ7F6eP.png)

`spin up` 명령어로 빌드한 Wasm 파일을 실행할 수 있습니다.

![Untitled](https://i.imgur.com/aG7sL1E.png)

CLI에 나온 [http://127.0.0.1:3000](http://127.0.0.1:3000) 으로 접속하면 실제로 코드에 구현된 대로 동작이 이루어짐을 확인할 수 있습니다.

![Untitled](https://i.imgur.com/kztgAxA.png)

## Description

fermyon에서 제공하는 Spin 프레임워크에 대해서 알아보았습니다. WASM으로 마이크로서비스를 이런 방식으로 실행하여 제공할 수 있다는 방식이 너무 흥미로웠습니다. 베타버전이긴 하지만 [Docker](https://docs.docker.com/desktop/wasm/)도 현재 WASM 방식의 컨테이너를 지원하고 있는것으로 보아 해당 방식이 주목받고 있다는 느낌이 듭니다.

이를 잘 다듬으면 AWS Lambda처럼 가볍게 함수 단위로 마이크로서비스를 띄워서 운영할 수도 있지 않을까 하는 예측을 조심스레 해봅니다.
